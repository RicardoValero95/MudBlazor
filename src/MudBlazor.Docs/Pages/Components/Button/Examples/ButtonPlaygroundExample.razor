@namespace MudBlazor.Docs.Examples

<MudGrid>
    <MudItem md="8" Class="mud-text-align-center my-auto">
        <MudButtonGroup>
            <MudButton>First</MudButton>
            <MudButton>Middle</MudButton>
            <MudButton>Last</MudButton>
        </MudButtonGroup>
        <MudText>@(MudIconButtonToggle ? "ON" : "OFF")</MudText>
        <MudButton OnClick="@(() => MudIconButtonToggle = !MudIconButtonToggle)"
                   StartIcon="@(ShowStartIcon ? Icons.Material.NavigateBefore : null)"
                   EndIcon="@(ShowEndIcon ? Icons.Material.NavigateNext : null)"
                   Color="@Color"
                   Variant="@Variant"
                   Size="@Size"
                   Disabled="@Disabled"
                   DisableElevation="@DisableElevation"
                   DisableRipple="@DisableRipple"
                   Style="@(ShowStyle ? Style : null)"
                   Class="@ElevationClass">
            <MudIcon Icon="@Icons.Material.Apple"></MudIcon>
            Text
            <MudIcon Icon="@Icons.Material.Android"></MudIcon>
        </MudButton>
        <MudFab OnClick="@(() => MudIconButtonToggle = !MudIconButtonToggle)"
                Icon="@Icons.Material.Add"
                Color="@Color"
                Size="@Size"
                Disabled="@Disabled"
                DisableElevation="@DisableElevation"
                DisableRipple="@DisableRipple"
                Style="@(ShowStyle ? Style : null)"
                Class="@ElevationClass" />
        <MudIconButton OnClick="@(() => MudIconButtonToggle = !MudIconButtonToggle)"
                       Icon="@(MudIconButtonToggle ? Icons.Material.AlarmOn : Icons.Material.AlarmOff)"
                       Color="@(MudIconButtonToggle ? Color.Success : Color.Error)"
                       Size="@Size"
                       Disabled="@Disabled"
                       DisableRipple="@DisableRipple"
                       Style="@(ShowStyle ? Style : null)"
                       Class="@ElevationClass">
        </MudIconButton>
        <MudToggleIconButton @bind-Toggled="@MudIconButtonToggle"
                             Icon="@Icons.Material.AlarmOff" ToggledIcon="@Icons.Material.AlarmOn"
                             Color="@Color.Error" ToggledColor="@Color.Success"
                             Size="@Size" ToggledSize="Size"
                             Disabled="@Disabled"
                             DisableRipple="@DisableRipple" />

    </MudItem>
    <MudItem md="4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.subtitle2" GutterBottom="true">Button Options</MudText>
                <MudCheckBox @bind-Checked="@ShowStartIcon" Label="Start Icon" Color="Color.Primary" Style="width:100%;" />
                <MudCheckBox @bind-Checked="@ShowEndIcon" Label="End Icon" Color="Color.Primary" Style="width:100%;" />
                <MudCheckBox @bind-Checked="@Disabled" Label="Disabled" Color="Color.Primary" Style="width:100%;" />
                <MudCheckBox @bind-Checked="@DisableElevation" Label="Disable Elevation" Color="Color.Primary" Style="width:100%;" />
                <MudCheckBox @bind-Checked="@DisableRipple" Label="Disable Ripple" Color="Color.Primary" Style="width:100%;" />

                <MudSelect Label="Color" @bind-Value="Color" Dense="true" OffsetY="true">
                    @foreach (Color item in Enum.GetValues(typeof(Color)))
                    {
                        <MudSelectItem Value="@item">
                            <MudText Color="@(item is Color.Transparent ? Color.Default : item)">@item</MudText>
                        </MudSelectItem>
                    }
                </MudSelect>
                <MudField Label="Variant" InnerPadding="false">
                    <MudRadioGroup SelectedLabelChanged="@((e) => Variant = (Variant)Enum.Parse(typeof(Variant), e))" SelectedLabel="@Variant.ToString()">
                        @foreach (Variant item in Enum.GetValues(typeof(Variant)))
                        {
                            <MudRadio Label="@item.ToString()" Placement="@Placement.Bottom"></MudRadio>
                        }
                    </MudRadioGroup>
                </MudField>
                <MudField Label="Size" InnerPadding="false">
                    <MudRadioGroup SelectedLabelChanged="@((e) => Size = (Size)Enum.Parse(typeof(Size), e))" SelectedLabel="@Size.ToString()">
                        @foreach (Size item in Enum.GetValues(typeof(Size)))
                        {
                            <MudRadio Label="@item.ToString()" Placement="@Placement.Bottom"></MudRadio>
                        }
                    </MudRadioGroup>
                </MudField>
                <MudCheckBox Label="Style" @bind-Checked="@ShowStyle" Color="Color.Primary"></MudCheckBox>
                <MudTextField Label="Style" @bind-Value="@Style" Immediate="true" Lines="5">
                </MudTextField>
                <MudSlider @bind-Value="@Elevation" Step="1" Min="0" Max="25">Elevation</MudSlider>

            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    public bool ShowStartIcon { get; set; }
    public bool ShowEndIcon { get; set; }
    public Color Color { get; set; }
    public Variant Variant { get; set; }
    public Size Size { get; set; }
    public bool Disabled { get; set; }
    public bool DisableElevation { get; set; }
    public bool DisableRipple { get; set; }
    public bool MudIconButtonToggle { get; set; }
    public bool ShowStyle { get; set; }
    public string Style { get; set; } = "background-color: yellowgreen;\rcolor: white;\rwidth: 200px;\rheight: 60px;";
    public string ElevationClass => $"mud-elevation-{Elevation}";
    public int Elevation { get; set; }
}